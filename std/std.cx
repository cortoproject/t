#package /corto/t/std

t/function id: requiresBlock=false returnType=string
t/function name: requiresBlock=false returnType=string
t/function parent: requiresBlock=false returnType=object
t/function type: requiresBlock=false returnType=lang/type

t/function @scope: requiresBlock=true
t/function @if: requiresBlock=true returnType=bool argType=bool echo=false
t/function ifn: requiresBlock=true returnType=bool argType=bool echo=false
t/function elif: requiresBlock=true returnType=bool argType=bool chainType=bool echo=false chain=true
t/function elifn: requiresBlock=true returnType=bool argType=bool chainType=bool echo=false chain=true
t/function @else: requiresBlock=true chainType=bool chain=true
t/function each: requiresBlock=true

t/comparator scoped{}
t/comparator persistent{}
t/comparator observable{}
t/comparator declared{}
t/comparator defined{}
t/comparator valid{}

t/comparator instanceof: argType=lang/type
